
/*
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣤⣤⣴⣶⣶⣶⣾⣶⣶⣤⣀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣠⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣷⣦⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣾⣿⣿⣿⣿⡿⠟⠛⠛⠛⠛⠻⣿⣿⣿⣿⣿⣷⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣠⣿⣿⣿⣿⡟⠉⣠⣤⣤⣤⣤⣤⣄⣀⠻⣿⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⡏⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⣿⣿⣿⡏⣿⡟⣿⣿⣿⡏⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠸⣿⣿⠋⣿⣿⣿⣿⠫⠁⣿⡇⢿⣿⣿⣿⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⠫⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⠋⠸⣿⣿⣿⡿⠸⠄⢹⡇⠄⢹⣿⣿⠄⠄⠙⢿⣿⣿⣿⣿⣿⣿⠄⠙⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣿⣿⡀⣸⣿⣿⣿⠁⡇⠄⠸⡇⠄⠄⣿⣿⠄⠄⠄⠄⠹⣿⣿⣿⣿⣿⣿⠄⠙⣿⣇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⠄⣤⣤⣤⠸⠄⠄⠙⢿⠇⠄⠄⣤⣶⣤⣿⣿⣿⣿⣿⠄⠴⣿⣿⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⣿⣿⣿⣴⣿⣿⣿⣿⣄⠄⠄⠙⠿⣄⣿⣿⣿⣿⢿⣿⣿⣿⣿⠄⠄⠻⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⠄⠻⣿⠿⢿⠄⠄⠄⠄⠄⠸⠻⣿⣿⣿⡇⠹⣿⣿⣿⠄⠄⠄⠙⣿⣆⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣇⠄⠢⣤⡎⠄⠄⠄⠄⠄⠄⠄⠢⣀⠙⠃⣠⣿⣿⣿⡇⠄⠄⣴⣿⣿⣆⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢿⣿⣿⣿⣿⣿⡏⠹⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠿⣿⣿⣿⡇⠄⣴⣿⣿⣿⣿⣆⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢸⣿⡏⣿⣿⣿⣄⠄⣷⠡⠄⠄⠄⠤⠒⠒⠛⠒⠤⠄⠄⠄⠄⠔⢹⣿⣿⣿⡇⠄⢹⣿⣿⣿⣿⣿⡆⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⣿⡇⢹⣿⣿⣿⣦⣰⠄⠄⠄⠄⡇⠐⠈⠈⠐⢸⠄⠄⠄⠄⠄⣿⣿⣿⣿⡇⠄⢸⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠹⡇⠄⣿⣿⣿⣿⣿⣷⠄⠄⠄⠈⡀⡀⡀⡀⠃⠄⠄⠄⣾⣿⣿⣿⣿⣿⡇⠄⣸⣿⣿⣿⠹⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣧⠄⢹⣿⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⣿⣿⡏⢇⠄⢹⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠸⡇⠄⣿⣿⣿⣿⣿⠄⠹⣿⣿⡄⠄⠄⠄⣾⣿⠟⡿⢹⣿⣿⣿⣿⠋⣿⡄⠄⢹⣿⠃⠸⡄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠇⠙⣿⠹⣿⠋⠄⣴⣿⡿⡄⡄⡄⡄⡄⢿⣦⠄⣸⡿⢸⣿⠋⠄⠙⡇⠄⢸⡏⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠃⠄⠸⣿⣿⣿⡿⡄⡄⡄⡄⡄⡄⡄⣿⣿⣿⣄⢠⠙⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣤⣤⣶⣶⣿⣿⣿⣿⣿⠃⡄⡄⡄⡄⡄⡄⡄⣿⣿⣿⣿⣷⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢿⣿⣿⣿⣿⣿⣿⣿⡟⡄⡄⡄⡄⡄⡄⡄⣸⣿⣿⣿⣿⣿⣿⣿⣦⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠸⣿⣿⣿⣿⣿⣿⣿⡢⡢⡪⡪⡪⡠⡄⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
*/

#include <iostream>
using namespace std;

const int N = 1e6+7, I = 1e9;
int n; 
int t[N<<1];

int __gcd(int a, int b) {
	if (b == 0) return a;
	return __gcd(b, a % b);
}

int gcd(int a, int b) {
	if (b > a) swap(a, b);
	return __gcd(a, b);
}


/**
 * segment tree
 * */
void build() {
	// ordinary segment tree
	for (int i = n-1; i >= 1; i--)
		t[i] = gcd(t[i<<1], t[i<<1|1]);
}

int query(int l, int r) {
	l += n, r += n;
	int res = t[l];
	for (; l < r; l>>=1, r>>=1) {
		if (l&1) res = gcd(res, t[l++]);
		if (r&1) res = gcd(res, t[--r]);
	}
	return res;
}


/**
 * drivers
 * */
int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n;
	if (n == 1) {
		cout << I << "\n";
		return 0;
	}
	for (int i = 0; i < n; i++) 
		cin >> t[n+i];
	//
	//
	build();
	int res = gcd(1, n);
	for (int i = 1; i < n-1; i++) {
		int r = gcd(query(0, i), query(i+1, n));
		res = max(res, r);
	}
	res = max(res, query(0, n-1));
	cout << res << "\n";
	return 0;
}
