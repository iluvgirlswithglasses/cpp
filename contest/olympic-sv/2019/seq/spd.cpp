
/*
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣤⣤⣴⣶⣶⣶⣾⣶⣶⣤⣀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣠⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣷⣦⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣾⣿⣿⣿⣿⡿⠟⠛⠛⠛⠛⠻⣿⣿⣿⣿⣿⣷⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣠⣿⣿⣿⣿⡟⠉⣠⣤⣤⣤⣤⣤⣄⣀⠻⣿⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⡏⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⣿⣿⣿⡏⣿⡟⣿⣿⣿⡏⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠸⣿⣿⠋⣿⣿⣿⣿⠫⠁⣿⡇⢿⣿⣿⣿⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⠫⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⠋⠸⣿⣿⣿⡿⠸⠄⢹⡇⠄⢹⣿⣿⠄⠄⠙⢿⣿⣿⣿⣿⣿⣿⠄⠙⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣿⣿⡀⣸⣿⣿⣿⠁⡇⠄⠸⡇⠄⠄⣿⣿⠄⠄⠄⠄⠹⣿⣿⣿⣿⣿⣿⠄⠙⣿⣇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⠄⣤⣤⣤⠸⠄⠄⠙⢿⠇⠄⠄⣤⣶⣤⣿⣿⣿⣿⣿⠄⠴⣿⣿⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⣿⣿⣿⣴⣿⣿⣿⣿⣄⠄⠄⠙⠿⣄⣿⣿⣿⣿⢿⣿⣿⣿⣿⠄⠄⠻⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⠄⠻⣿⠿⢿⠄⠄⠄⠄⠄⠸⠻⣿⣿⣿⡇⠹⣿⣿⣿⠄⠄⠄⠙⣿⣆⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣇⠄⠢⣤⡎⠄⠄⠄⠄⠄⠄⠄⠢⣀⠙⠃⣠⣿⣿⣿⡇⠄⠄⣴⣿⣿⣆⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢿⣿⣿⣿⣿⣿⡏⠹⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠿⣿⣿⣿⡇⠄⣴⣿⣿⣿⣿⣆⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢸⣿⡏⣿⣿⣿⣄⠄⣷⠡⠄⠄⠄⠤⠒⠒⠛⠒⠤⠄⠄⠄⠄⠔⢹⣿⣿⣿⡇⠄⢹⣿⣿⣿⣿⣿⡆⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⣿⡇⢹⣿⣿⣿⣦⣰⠄⠄⠄⠄⡇⠐⠈⠈⠐⢸⠄⠄⠄⠄⠄⣿⣿⣿⣿⡇⠄⢸⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠹⡇⠄⣿⣿⣿⣿⣿⣷⠄⠄⠄⠈⡀⡀⡀⡀⠃⠄⠄⠄⣾⣿⣿⣿⣿⣿⡇⠄⣸⣿⣿⣿⠹⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣧⠄⢹⣿⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⣿⣿⡏⢇⠄⢹⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠸⡇⠄⣿⣿⣿⣿⣿⠄⠹⣿⣿⡄⠄⠄⠄⣾⣿⠟⡿⢹⣿⣿⣿⣿⠋⣿⡄⠄⢹⣿⠃⠸⡄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠇⠙⣿⠹⣿⠋⠄⣴⣿⡿⡄⡄⡄⡄⡄⢿⣦⠄⣸⡿⢸⣿⠋⠄⠙⡇⠄⢸⡏⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠃⠄⠸⣿⣿⣿⡿⡄⡄⡄⡄⡄⡄⡄⣿⣿⣿⣄⢠⠙⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣤⣤⣶⣶⣿⣿⣿⣿⣿⠃⡄⡄⡄⡄⡄⡄⡄⣿⣿⣿⣿⣷⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢿⣿⣿⣿⣿⣿⣿⣿⡟⡄⡄⡄⡄⡄⡄⡄⣸⣿⣿⣿⣿⣿⣿⣿⣦⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠸⣿⣿⣿⣿⣿⣿⣿⡢⡢⡪⡪⡪⡠⡄⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
*/

#include <iostream>
using namespace std;

#define ll long long
const int N = 1e5+7;
int n, k, l, r; 
ll v, a[N], t[N<<1];

ll __gcd(ll a, ll b) {
	if (b == 0) return a;
	return __gcd(b, a % b);
}

ll gcd(ll a, ll b) {
	if (b > a) swap(a, b);
	return __gcd(a, b);
}


/**
 * segment tree
 * */
void build() {
	// ordinary segment tree
	for (int i = n-1; i >= 1; i--)
		t[i] = gcd(t[i<<1], t[i<<1|1]);
}

ll query(int l, int r) {
	// returns gcd( km[l, r) );
	l += n, r += n;
	ll res = t[l];
	for (; l < r; l>>=1, r>>=1) {
		if (l&1) res = gcd(res, t[l++]);
		if (r&1) res = gcd(res, t[--r]);
	}
	return res;
}


/**
 * drivers
 * */
int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> k;
	// a[i] != b[i]
	for (int i = 0; i < n; i++) cin >> a[i];
	for (int i = 0; i < n; i++) {
		cin >> v; t[i+n] = abs(a[i] - v);
	}
	//
	build();
	while (k--) {
		cin >> l >> r;
		cout << query(--l, r) << "\n";
	}
	return 0;
}
